/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lsann;
import lsann.fileio.JarReader;
import org.junit.Assert;
import org.junit.Test;


public class AppTest {
    @Test
    public void testScanAnnotations() {
        //System.setProperty("lsann.visitclass.verbose", "1");

        //int mask = 0x21;
        //System.out.printf("access mask: 0x%x val: %s\n", mask, AsmAccessNames.get(mask, AsmAccessNames.SCOPE_CLASS) );
        System.out.println("list annotations in ./build/classes");

        try {
            JarReader jutil = new JarReader(false);
            jutil.process("./build/classes", new AllJarClassVisitors.LsAnnotationJarClassVisitor());
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
            Assert.fail();
        }
    }

    @Test
    public void testScanAnnotationsAndShowCtor() {
        //System.setProperty("lsann.visitclass.verbose", "1");

        //int mask = 0x21;
        //System.out.printf("access mask: 0x%x val: %s\n", mask, AsmAccessNames.get(mask, AsmAccessNames.SCOPE_CLASS) );

        System.out.println("\nlist annotations in ./build/classes and show constructor on classes with annotation\n");

        System.setProperty  ("lsann.showctor","1");
        try {
            JarReader jutil = new JarReader(false);
            jutil.process("./build/classes", new AllJarClassVisitors.LsAnnotationJarClassVisitor());
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
            Assert.fail();
        }
        System.clearProperty("lsann.showctor");
        assert(System.getProperty  ("lsann.showctor") == null);

    }

    @Test
    public void testShowDerived() {
        try {
            JarReader jutil = new JarReader(false);
            AllJarClassVisitors.ClassHierarchyJarClassVisitor visit = new AllJarClassVisitors.ClassHierarchyJarClassVisitor();
            jutil.process("./build/classes", visit);

            System.out.println("show bases of:");
            visit.get().showBasesOf("lsann.attrib.TestDerived2");
            System.out.println("show derived of:");
            visit.get().showDerivationsOf("lsann.attrib.TestInterface");
            System.out.println("show derived of:");
            visit.get().showDerivationsOf("lsann.attrib.TestBaseClass");
            System.out.println("show derived of:");
            visit.get().showDerivationsOf("java.lang.Object");
        } catch (java.io.IOException ex) {
            ex.printStackTrace();
            Assert.fail();
        }
    }

    @Test
    public void testAnnotationUsage() {

        try {
            JarReader jutil = new JarReader(false);
            AllJarClassVisitors.AnnoDeclGraphJarClassVisitor visit = new AllJarClassVisitors.AnnoDeclGraphJarClassVisitor();
            jutil.process("./build/classes", visit);

            System.out.println("\nshow attribute definitions that extend @lsann.attrib.TestAttrib\n");
            visit.showAnnotationExtensionOf("lsann.attrib.TestAttrib");

            System.out.println("\nshow attribute definitions that are the base of @lsann.attrib.TestAttrib3\n");
            visit.showAnnotationBasesOf("lsann.attrib.TestAttrib3");

            System.out.println("\nshow attribute usage of @lsann.attrib.TestAttrib4\n");
            visit.showAnnotationUsage("lsann.attrib.TestAttrib4", true);

            System.out.println("\nshow recursive attribute usage of @lsann.attrib.TestAttrib\n");
            visit.showAnnotationUsageRecursive("lsann.attrib.TestAttrib");

        } catch (java.io.IOException ex) {
            ex.printStackTrace();
            Assert.fail();
        }
    }
}